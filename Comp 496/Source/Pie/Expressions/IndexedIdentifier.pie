/*
COMP 496
Pie Language Compiler 0.2
Jason Bell
3078931
February 22, 2016
*/

import Irony.Parsing
import System.CodeDom.Compiler

namespace Pie.Expressions:

	// An expression representing an indexer accessed by an identifier
	type IndexedIdentifier(Expression):

		// Construct a new indexed expression with the given parent expression
		new(parent):
			base(parent)

		// Define the grammatical rules for the expression
		shared act DefineRules(grammar):
			grammar.Indexer = NonTerminal("Index")
			grammar.Indexer = grammar.ToTerm("[") + grammar.ExpressionList + "]"

			grammar.IndexedIdentifierRule = NonTerminal("IndexedIdentifier")
			grammar.IndexedIdentifierRule.Rule = grammar.Identifier + grammar.Indexer
			
		// Construct a new expression using the given parse node.
		shared act Build(parser, parent, node):
			i = IndexedIdentifier(parent)
			parent.Children.Add(i)
			i.Name = node.ChildNodes[0].FindTokenAndGetText()
			for n in node.ChildNodes[1].ChildNodes[1].ChildNodes:
				parser.ConsumeParseTree(i, n)

		// Generate the C# code for the expression.
		override func Emit():
			source = ""
			source += Name
			source += "["
			if Children.Count > 0:
				source += Children[0].Emit()
				for i = 1; i < Children.Count; i++:
					source += ","
					source += Children[i].Emit()
			source += "]"
			return source

		// Test that a list can be indexed with an integer
		test List:
			source = @"
type Foo:
	shared func Bar():
		l = list()
		l.Add(1234)
		return l[0]
			"
			result = TestHelper.Compile(source, false)
			assert result != null
			for e in result.Errors:
				ce = e as CompilerError
				System.Console.WriteLine("error: " + ce.ErrorText)
			t = result.CompiledAssembly.GetType("Foo")
			x = t.GetMethod("Bar").Invoke(null, null)
			assert x == 1234

		// Test that an indexer works on a qualified identifier
		test QualifiedList:
			source = @"
import System.Dynamic
type Foo:
	shared func Bar():
		x = ExpandoObject()
		x.List = list()
		x.List.Add(1234)
		return x.List[0]
			"
			result = TestHelper.Compile(source, false)
			assert result != null
			for e in result.Errors:
				ce = e as CompilerError
				System.Console.WriteLine("error: " + ce.ErrorText)
			t = result.CompiledAssembly.GetType("Foo")
			x = t.GetMethod("Bar").Invoke(null, null)
			assert x == 1234
